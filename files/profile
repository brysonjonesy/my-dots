# Set curl path

export PATH="/usr/local/opt/curl/bin:$PATH"

# https://github.com/keybase/keybase-issues/issues/1712#issuecomment-141226705
export GPG_TTY=$(tty)

# who cares about casing? I don't
set completion-ignore-case on

. `brew --prefix`/etc/profile.d/z.sh

set_ran_date(){
  echo $(($(date +%s) / 60 / 60 / 24)) >! $1
}

check_to_update() {
  local script=$1
  local app=$2
  local updateDays=${3:-7}
  local settingsDir=~/.dot-settings
  local settingsPath=$settingsDir/$app;

  declare -i updateDays

  [ -d "$settingsDir" ] || mkdir $settingsDir
  [ -f "$settingsPath" ] || set_ran_date "$settingsPath"

  declare -i current=$(($(date +%s) / 60 / 60 / 24))
  declare -i days=$(cat $settingsPath)
  declare -i been=$(($current - $days))
  declare -i days
  declare -i been

  if (($been >= $updateDays)); then
    if read -q "?${YELLOW}Do you want to update ${2}? ${CYAN}[y/n]${WHITE} "; then
        sh -c $script
    else
      set_ran_date "$settingsPath"
    fi
  fi
}

swap_npm_user() {
  local thedir="$(PWD)"

  if [[ $thedir == *"vs"* ]]; then
    ln -sf ~/git/vs/.npmrc ~/.npmrc
   else
     ln -sf ~/git/personal/.npmrc ~/.npmrc
   fi
}

add-zsh-hook chpwd swap_npm_user && swap_npm_user

check_to_update /usr/local/bin/brew-update brew 7

source ~/.work-profile

# set PATH so it includes user's private bin if it exists
if [ -d "$HOME/bin" ] ; then
  PATH="$HOME/bin:$PATH"
fi

export PATH=$HOME/.fnm/current/bin:$PATH
export FNM_MULTISHELL_PATH=$HOME/.fnm/current
export FNM_DIR=$HOME/.fnm
export FNM_NODE_DIST_MIRROR=https://nodejs.org/dist
export FNM_LOGLEVEL=all
export PATH="/usr/local/opt/imagemagick@6/bin:$PATH"
export PATH="/usr/local/sbin:$PATH"

autoload -U add-zsh-hook

_fnm_autoload_hook () {
  if [[ -f .node-version && -r .node-version ]]; then
    echo "fnm: Found .node-version"
    fnm use
  elif [[ -f .nvmrc && -r .nvmrc ]]; then
    echo "fnm: Found .nvmrc"
    fnm use
  fi
}

add-zsh-hook chpwd _fnm_autoload_hook \
  && _fnm_autoload_hook

fpath=(/usr/local/share/zsh-completions $fpath)

# 1Password
opon() {
  if [[ -z $OP_SESSION_crouska ]]; then
    eval $(op signin crouska crouska@gmail.com)
  fi
}

opoff() {
  op signout
  unset OP_SESSION_crouska
}

getpwd() {
  opon
  op get item "$1" |jq -r '.details.fields[] |select(.designation=="password").value'
  # opoff
}

getmfa() {
  opon
  op get totp "$1"
  # opoff
}

sshkey() {
  opon
  echo "$(op get item "ssh-key-$1" | jq -r '.details.notesPlain')" | ssh-add -
  # opoff
}

sshpub() {
  opon
  echo "$(op get item "ssh-pub-$1" | jq -r '.details.notesPlain')" | ssh-add -
  # opoff
}

trap opoff EXIT

cloc-git() {
  git clone --depth 1 "$1" temp-linecount-repo &&
  printf "('temp-linecount-repo' will be deleted automatically)\n\n\n" &&
  scc temp-linecount-repo &&
  rm -rf temp-linecount-repo
}
